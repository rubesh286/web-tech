


let p=new Promise ((resolve,reject)=>{

    resolve ("hello")

    // reject("not done")

})


p.then((a)=>{         // It is used to handel the resolve anything which is used to print whatever the data present inside the resolve

console.log(a);

})

.catch((b)=>{      // It is used to handel the reject block.

    console.log(b);
})

.finally(

    console.log("promise is there")
    
)

// ! 1.promise static methods


let p1=new Promise((resolve,reject)=>{

    // reject("reject 1")
    resolve("resolve 1")
})

let p2=new Promise((resolve,reject)=>{

    // reject("reject 2")
    resolve("resolve 2")
})

let p3=new Promise((resolve,reject)=>{

    // reject("reject 3")
    resolve("resolve 3")
})

let p4=new Promise((resolve,reject)=>{

    // reject("reject 4")
    resolve("resolve 4")
})


// ! 2.promise.any()    // it will give the first resolve as an output

Promise.any([p1,p2,p3,p4])

.then((data)=>{
    console.log(data);  
})

.catch((arr)=>{
    console.log(arr);
})


// ! 3.promise.all

Promise.all([p1,p2,p3,p4])
.then((data)=>{
    console.log(data);  
})

.catch((arr)=>{
    console.log(arr);
})

// ! 4.promise.allsettled

Promise.allSettled([p1,p2,p3,p4])

.then((data)=>{
    console.log(data);  
})

.catch((arr)=>{
    console.log(arr);
})

// ! 5.promise.race()


Promise.race([p4,p1,p2,p3])
.then((data)=>{
    console.log(data);  
})

.catch((arr)=>{
    console.log(arr);
})


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































